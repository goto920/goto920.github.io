{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["m","audioCtx","gainNode","version","packageJSON","subversion","jaText","messages","ja","usText","us","window","navigator","language","slice","AudioContext","webkitAudioContext","shifter","App","props","params","filename","audioBuffer","isPlaying","loop","loopInterval","exportDataL","exportDataR","exportBuffer","save","state","playingAt","playingAtSlider","timeA","timeB","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","loadFile","loopButtonStr","loopAB","saveButtonStr","exportWav","setState","bind","handleWindowClose","handleSpeedSlider","handlePitchSlider","handleTimeSlider","handleVolumeSlider","handlePlay","handleSaveB","fakeDownload","handleLoop","playAB","handleLang","event","disconnect","off","close","createGain","addEventListener","this","removeEventListener","startBStyle","loopBStyle","saveBStyle","duration","pause","color","stopLoop","abortExport","hrBlue","border","className","title","name","onClick","input","type","accept","onChange","speed","reset","min","max","value","pitch","parseFloat","toFixed","style","time","timeNote","step","Math","round","setA","setB","resetAB","volume","volumeNote","rewind","interval","defaultValue","href","homepage","target","rel","guide","files","length","totalTime","playOnce","file","reader","FileReader","onload","e","decodeAudioData","result","saudioBuffer","error","console","log","err","readAsArrayBuffer","tempo","pitchSemi","pow","vol","gain","resume","outFileName","split","parseInt","blob","Blob","toWav","saveAs","saverNode","channels","numberOfChannels","PitchShifter","createScriptProcessor","createBuffer","sampleRate","base","AudioBuffer","prototype","copyToChannel","onaudioprocess","inputBuffer","outputBuffer","channel","inputData","getChannelData","outputData","exportData","sample","on","detail","currentPos","timePlayed","formattedTimePlayed","formattedDuration","connect","destination","from","to","offset","partialAudioBuffer","left","right","subarray","tmp","oldm","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6835955b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\nimport {saveAs} from 'file-saver';\nimport * as toWav from 'audiobuffer-to-wav';\nimport messages from './language.json';\n\nconst version = packageJSON.subversion\n// var homepage = 'https://goto920.github.io/demos/variableplayer/'\nconst jaText = messages.ja;\nconst usText = messages.us;\nvar m;\nif (window.navigator.language.slice(0,2) === 'ja') m = jaText\nelse m = usText\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = null // null\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      filename: null,\n      audioBuffer: null,\n      isPlaying: false,\n      loop: false,\n      loopInterval: 2.0,\n      exportDataL: null,\n      exportDataR: null,\n      exportBuffer: null,\n      save: false\n    }\n\n    this.state = {\n      ja: (m === jaText),\n      playingAt: 0,\n      playingAtSlider: 0,\n      timeA: 0,\n      timeB: 0,\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone unit (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 75, // in percent\n      startButtonStr: m.loadFile, \n      loopButtonStr: m.loopAB,\n      saveButtonStr: m.exportWav\n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleSaveB = this.handleSaveB.bind(this);\n    this.fakeDownload = this.fakeDownload.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    this.playAB = this.playAB.bind(this);\n    this.handleLang = this.handleLang.bind(this);\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    if (shifter) { shifter.disconnect(); shifter.off(); shifter = null; \n      gainNode.disconnect(); }\n    audioCtx.close();\n  }\n\n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  render() {\n    const {loadFile, \n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handleTimeSlider, handlePlay, handleSaveB, \n           handleLoop, handleLang} = this;\n    const {ja,playingAt, playingAtSlider, timeA, timeB,\n           playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr, loopButtonStr, saveButtonStr} \n           = this.state\n\n    let duration = 0;\n    if (this.params.audioBuffer)\n       duration = this.params.audioBuffer.duration\n\n    let startBStyle; \n    if (startButtonStr === m.pause)\n      startBStyle = {color: 'green'};\n    else  \n      startBStyle = {};\n\n    let loopBStyle; \n    if (loopButtonStr === m.stopLoop)\n      loopBStyle = {color: 'green'};\n    else  \n      loopBStyle = {};\n\n    let saveBStyle; \n    if (saveButtonStr === m.abortExport)\n      saveBStyle = {color: 'green'};\n    else  \n      saveBStyle = {};\n\n    let hrBlue = {border: '1px dotted', color: 'blue'};\n\n    return (\n      <div className=\"App\">\n      {m.title} &nbsp;&nbsp;\n      <span className='small-button'>\n       <button name='language' onClick={handleLang}>\n       {ja ? 'En(US)' : '日本語'}</button> \n      </span>\n      <hr />\n      1) {m.input}: <br />\n        <span className=\"selectFile\">\n        <input type=\"file\" name=\"loadFile\"\n        accept=\"audio/*,.wav,.mp3,.aac,.m4a,.opus\" \n        onChange={loadFile} /><br />\n        </span>\n      <hr />\n\n      {m.speed}: {playSpeed} &nbsp;&nbsp;\n        <button name='reset' onClick={handleSpeedSlider} >{m.reset}</button>\n        <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      {m.pitch}: {parseFloat(playPitch).toFixed(2)} &nbsp;&nbsp;\n       <button name='reset' onClick={handlePitchSlider} >{m.reset}</button>\n       <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />12<br />\n         <hr style={hrBlue}/>\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />100<br />\n         </center>\n\n        </span>\n      <hr />\n        {m.time}: {playingAt.toFixed(2)} &nbsp; {m.timeNote}<br />\n        <span className='slider'> \n        <center>\n        0<input type='range' name='timeSlider'\n        min='0' max={duration}\n        value = {playingAtSlider} step='1'\n        onChange={handleTimeSlider} />\n        {Math.round(duration)}<br />\n        </center>\n        <button name='setA' onClick={handleLoop} >{m.setA}</button>\n        : {timeA.toFixed(2)} &nbsp;&nbsp;\n        <button name='setB' onClick={handleLoop} >{m.setB}</button>\n        : {timeB.toFixed(2)} &nbsp;&nbsp;\n        <button name='resetAB' onClick={handleLoop}> \n        {m.resetAB}\n        </button>\n        </span>\n        <hr />\n      {m.volume}: {playVolume} &nbsp;&nbsp; {m.volumeNote}<br />\n        <span className='slider'> \n         <center>\n         0<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        2A) <button name='startPause' \n               onClick={handlePlay} style={startBStyle}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='Rewind' onClick={handleLoop}>\n        {m.rewind}</button>\n        <hr style={hrBlue}/>\n        2B) <button name='LoopAB' \n              onClick={handleLoop} style={loopBStyle}>\n        {loopButtonStr}</button> &nbsp;&nbsp;\n        {m.interval} <span className='selector'>\n        <select name='loopInterval'\n           defaultValue={this.params.loopInterval} onChange={handleLoop}>\n          <option value='0'>00</option>\n          <option value='1'>01</option>\n          <option value='2'>02</option>\n          <option value='4'>04</option>\n          <option value='5'>05</option>\n          <option value='10'>10</option>\n          <option value='20'>20</option>\n          <option value='30'>30</option>\n          <option value='60'>60</option>\n        </select>\n        </span>\n        <hr />\n        3) <button name='save' \n            onClick={handleSaveB} style={saveBStyle}> \n        {saveButtonStr}\n        </button> \n      </span>\n      <hr />\n        {m.version}: {version}, &nbsp;\n        <a href={m.homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">{m.guide}</a>\n        <br />\n        Based on <a href=\"https://github.com/cutterbl/SoundTouchJS\"\n         target=\"_blank\" rel=\"noopener noreferrer\">\n        cutterbl/SoundTouchJS</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n\n   if (event.target.name !== 'loadFile') return;\n   if (event.target.files.length === 0) return;\n   if (this.params.isPlaying) return;\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: m.playOnce})\n   let file = event.target.files[0]\n   this.params.filename = file.name;\n\n   let reader = new FileReader()\n\n   if (audioCtx) audioCtx.close();\n   audioCtx = new window.AudioContext()\n   gainNode = audioCtx.createGain()\n\n   reader.onload = function (e) {\n\n     audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.saudioBuffer = null\n          this.params.audioBuffer = audioBuffer\n          this.setState({startButtonStr: m.playOnce, \n             playingAt: 0, playingAtSlider: 0})\n          this.setState({timeA: 0})\n          this.setState({timeB: audioBuffer.duration})\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     // console.log('handleSpeedSlider');\n\n     if (event.target.name === 'speedSlider') {\n       if (shifter) shifter.tempo = event.target.value/100.0\n       this.setState({playSpeed: event.target.value})\n       return;\n     }\n\n     if (event.target.name === 'reset') {\n       if (shifter) shifter.tempo = 1;\n       this.setState({playSpeed: 100})\n       return;\n     }\n\n  }\n\n  handlePitchSlider(event) { \n\n     let pitchSemi = 0;\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = parseFloat(event.target.value) \n           + parseFloat(this.state.playPitchCents)/100.0;\n       this.setState({playPitchSemi: event.target.value})\n     } else if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = parseFloat(this.state.playPitchSemi)\n           + parseFloat(event.target.value)/100.0\n       this.setState({playPitchCents: event.target.value})\n     } else if (event.target.name === 'reset') {\n       this.setState({playPitchSemi: 0, playPitchCents: 0});\n       pitchSemi = 0;\n     }\n\n     if (shifter) {shifter.pitch = Math.pow(2.0, pitchSemi/12.0);}\n     this.setState({playPitch: pitchSemi});\n\n     return;\n  }\n\n  handleTimeSlider(event) { \n\n     if (event.target.name !== 'timeSlider') return\n\n     if (this.state.startButtonStr === m.playOnce) {\n        let value = event.target.value;\n        this.setState({playingAt: parseFloat(value)});\n        this.setState({playingAtSlider: value});\n     }\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n     const {audioBuffer} = this.params;\n\n// startPause or LoopAB\n   if (event.target.name === 'startPause') { \n     if (audioCtx.state === 'suspended') audioCtx.resume()\n\n     let timeA, timeB; \n\n// Pause\n     if (this.state.startButtonStr === m.pause){\n       if (!this.params.isPlaying) return;\n       if (shifter === null) return\n\n       shifter.disconnect(); shifter.off(); shifter = null;\n       gainNode.disconnect();\n       this.params.isPlaying = false;\n       this.setState({playingAtSlider: this.state.playingAt});\n       this.setState({startButtonStr: m.playOnce})\n\n       return;\n     } // end pause \n\n// PlayOnce\n\n     if (event.target.name === 'startPause' \n       && this.state.startButtonStr === m.playOnce) {\n       if (this.params.isPlaying) return;\n\n       timeA = this.state.playingAt;\n       timeB = audioBuffer.duration;\n\n       this.playAB(timeA, timeB); // timeA, timeB\n       return;\n     }\n\n   } // END  if (event.target.name)\n\n    return;\n  } // end handlePlay()\n\n  fakeDownload(audioBuffer){\n\n    const words = this.params.filename.split('.');\n    let outFileName = \n         words[0]\n       + '&s' + parseInt(this.state.playSpeed)\n       + '&p' + parseInt(this.state.playPitch*100)\n       + '.wav';\n    let blob = new Blob([toWav(audioBuffer)], {type: 'audio/vnd.wav'});\n    saveAs(blob,outFileName);\n  }\n\n  handleSaveB(event) { \n    // console.log ('handleSaveB');\n\n    if (event.target.name !== 'save') return;\n\n    if (this.state.startButtonStr !== m.playOnce\n      || this.state.loopButtonStr !== m.loopAB) return;\n\n    const {audioBuffer} = this.params;\n\n    if (this.state.saveButtonStr === m.abortExport) {\n      if(shifter) { shifter.disconnect(); shifter.off(); shifter = null;\n        gainNode.disconnect(); }\n\n      this.params.isPlaying = false;\n      this.setState({saveButtonStr: m.exportWav});\n      // console.log ('handleSaveB: AbortExport');\n\n      return;\n    }\n\n// Save\n    if (this.state.saveButtonStr === m.exportWav) {\n\n      if (this.params.isPlaying) return;\n      if (!audioBuffer) return;\n\n\n// https://www.gmass.co/blog/record-audio-mobile-web-page-ios-android/\n// https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n\n      let saverNode = null;\n      let channels = audioBuffer.numberOfChannels;\n\n      if (shifter) {shifter.disconnect(); shifter.off(); shifter= null;}\n\n      let bufferSize = 16384; // 1024?\n      shifter = new PitchShifter(audioCtx, audioBuffer, bufferSize);\n      shifter.tempo = this.state.playSpeed/100.0;\n      shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n\n      saverNode = audioCtx.createScriptProcessor(bufferSize, \n      channels,channels);\n/*\n      if (audioCtx.createScriptProcessor) {\n        saverNode = audioCtx.createScriptProcessor(bufferSize, \n          channels,channels);\n        console.log ('createScriptProcessor');\n      } else if (audioCtx.createJavaScriptNode) {\n        saverNode = audioCtx.createJavaScriptNode(bufferSize,channels,channels);\n        console.log ('createJavaScriptNode');\n      } else {\n        console.log ('createScript is not supported');\n        return;\n      }\n*/\n\n/* Storage */\n      this.params.exportBuffer = audioCtx.createBuffer( \n        channels,\n        parseInt(audioBuffer.length*(100/this.state.playSpeed))\n        + bufferSize, \n        audioBuffer.sampleRate);\n\n      this.params.save = true;\n\n/* Script Processor */\n      let base = 0;\n      if (AudioBuffer.prototype.copyToChannel) \n        console.log('copyToChannel OK');\n      else \n        console.log('copyToChannel NG');\n\n      saverNode.onaudioprocess = function(event){\n        let inputBuffer = event.inputBuffer;\n        let outputBuffer = event.outputBuffer;\n        let exportBuffer = this.params.exportBuffer;\n\n        for (let channel = 0; channel < inputBuffer.numberOfChannels; \n             channel++){\n          let inputData  = inputBuffer.getChannelData(channel);\n          let outputData = outputBuffer.getChannelData(channel);\n          let exportData = exportBuffer.getChannelData(channel);\n\n          if (AudioBuffer.prototype.copyToChannel){\n            outputBuffer.copyToChannel(inputData, channel,0);\n            exportBuffer.copyToChannel(inputData, channel, base);\n          } else {\n            for (let sample = 0; sample < inputBuffer.length; sample++) {\n              let value = inputData[sample];\n              outputData[sample] = value;\n              exportData[base + sample] = value;\n            }\n          } // end if copyToChannel\n\n        } // end for channel\n\n        base += inputBuffer.length;\n\n      }.bind(this); // end onaudioprocess\n\n    // gainNode.gain.value = 0.2;\n    // this.handleVolumeSlider({target: {name: 'volumeSlider', value: 20}});\n\n      shifter.on('play', detail => {\n        let currentPos = parseFloat(detail.timePlayed);\n        this.setState({playingAt: currentPos, playingAtSlider: currentPos}); \n\n        if (detail.formattedTimePlayed >= shifter.formattedDuration) {\n          saverNode.disconnect();\n          shifter.off(); shifter.disconnect(); shifter = null;\n          gainNode.disconnect();\n\n          this.fakeDownload(this.params.exportBuffer);\n          this.params.isPlaying = false;\n          this.setState({saveButtonStr: m.exportWav});\n          this.params.save = false;\n          return;\n        } // end 100%\n\n      }); // end shifter.on()\n\n      this.setState({saveButtonStr: m.abortExport});\n      this.params.isPlaying = true;\n      shifter.connect(saverNode);\n      saverNode.connect(gainNode);\n      gainNode.connect(audioCtx.destination);\n      if (audioCtx.state === 'suspended') audioCtx.resume()\n\n      return;\n    } // end if exportWav\n\n  } // end handleSaveB\n\n  handleLoop(event) {\n\n    if (event.target.name === 'loopInterval') {\n      this.params.loopInterval = parseInt(event.target.value,10);\n      return;\n    }\n\n\n    if (event.target.name === 'Rewind') {\n      if (this.params.isPlaying) return;\n\n      this.setState ({playingAt: 0});\n      this.setState ({playingAtSlider: 0});\n\n      return;\n    }\n\n    if (event.target.name === 'setA') {\n      this.setState ({timeA: this.state.playingAt});\n      this.setState ({playingAtSlider: this.state.playingAt});\n      return;\n    }\n\n    if (event.target.name === 'setB'){\n      if (this.state.playingAt >=  this.state.timeA)\n        this.setState ({timeB: parseFloat(this.state.playingAt)});\n      else\n        this.setState ({timeB: parseFloat(this.state.timeA) + parseFloat(10)});\n      return;\n    }\n\n    if (event.target.name === 'LoopAB'){\n      if (!this.params.audioBuffer) return;\n\n      if (this.state.loopButtonStr === m.loopAB){ \n        if (this.params.isPlaying) return;\n        this.params.loop = true;\n        this.playAB(this.state.timeA, this.state.timeB);\n        this.setState ({loopButtonStr: m.stopLoop});\n        this.setState ({startButtonStr: m.playOnce});\n      } else if (this.state.loopButtonStr === m.stopLoop){ \n\n        if (!this.params.isPlaying) return;\n\n        if(shifter){ shifter.disconnect(); shifter.off(); shifter = null;\n          gainNode.disconnect()}\n\n        this.params.isPlaying = false;\n        this.params.loop = false;\n        this.setState ({loopButtonStr: m.loopAB});\n      }\n\n      return;\n    }\n\n// reset AB\n    if (event.target.name === 'resetAB') {\n      if (this.params.audioBuffer === null) return;\n      this.setState ({timeA: 0,\n                      timeB: this.params.audioBuffer.duration,\n                      playingAtSlider: 0});\n\n    return;\n   } // end resetAB\n\n  } // END handleLoop\n\n\n  playAB(timeA, timeB) {\n\n     if (this.params.isPlaying) return;\n     if (this.params.audioBuffer === null) return;\n\n     if (audioCtx.state === 'suspended') audioCtx.resume()\n\n     if (timeB <= timeA){\n       timeB = timeA + 5; // min 5 sec\n       this.setState({timeB: timeB});\n     }\n\n     const {audioBuffer, loopInterval} = this.params;\n\n     const from = timeA*audioBuffer.sampleRate;\n     const to = timeB*audioBuffer.sampleRate;\n     let offset = 0;\n     if (this.params.loop) \n       offset = loopInterval*audioBuffer.sampleRate;\n\n     let partialAudioBuffer = audioCtx.createBuffer(2,\n          to - from + offset, audioBuffer.sampleRate);\n     let left  = audioBuffer.getChannelData(0);\n     let right = audioBuffer.getChannelData(1);\n\n     left  = left.subarray(from, to);\n     let tmp = partialAudioBuffer.getChannelData(0);\n\n     for (let sample=0; sample < left.length; sample++) \n        tmp[sample + offset] = left[sample];\n\n     if (audioBuffer.numberOfChannels >= 2) {\n       tmp = partialAudioBuffer.getChannelData(1);\n       right = right.subarray(from, to);\n\n       for (let sample=0; sample < right.length; sample++) \n         tmp[sample + offset] = right[sample];\n     }\n     tmp = null; \n\n// create PitchShifter and Play\n     let bufferSize = 16384;\n     if (shifter) { shifter.disconnect(); shifter.off(); shifter= null;}\n     shifter = new PitchShifter(audioCtx, partialAudioBuffer, bufferSize)\n     partialAudioBuffer = null\n     shifter.tempo = this.state.playSpeed/100.0\n     shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n     let duration = shifter.formattedDuration;\n\n     shifter.on('play', detail => {\n\n       let currentPos =  parseFloat(timeA) + parseFloat(detail.timePlayed);\n       if (this.params.loop) currentPos -= loopInterval;\n\n       this.setState({playingAt: currentPos, playingAtSlider: currentPos}); \n\n       if (detail.formattedTimePlayed >= duration) {\n         shifter.off(); shifter.disconnect(); shifter = null;\n         gainNode.disconnect();\n\n         this.params.isPlaying = false;\n         if (this.state.startButtonStr === m.pause)\n           this.setState ({playingAt: 0, playingAtSlider: 0,\n             startButtonStr: m.playOnce}); \n\n         if (this.params.loop)\n           this.playAB(this.state.timeA, this.state.timeB);\n         return;\n       }\n\n     }); // end shifter.on\n \n    shifter.connect(gainNode);\n    gainNode.connect(audioCtx.destination); // start play\n\n    this.params.isPlaying = true; \n    if (!this.params.loop)\n      this.setState({startButtonStr: m.pause});\n\n    return;\n  } // END playAB()\n\n  handleLang(e){\n\n    if (this.params.isPlaying) return; // cannot change during playback\n\n    if (e.target.name === 'language'){\n      let oldm = m;\n      if (this.state.ja) { \n        m = usText; this.setState({ja: false}); \n      } else { \n        m = jaText; this.setState({ja: true}); }\n\n      if (this.state.startButtonStr === oldm.loadFile)\n        this.setState({startButtonStr: m.loadFile});\n      else if (this.state.startButtonStr === oldm.playOnce)\n        this.setState({startButtonStr: m.playOnce});\n      else if (this.state.startButtonStr === oldm.pause)\n        this.setState({startButtonStr: m.pause});\n\n      if (this.state.loopButtonStr === oldm.loopAB)\n        this.setState({loopButtonStr: m.loopAB});\n      else if (this.state.loopButtonStr === oldm.stopLoop)\n        this.setState({loopButtonStr: m.stopLoop});\n\n      if (this.state.saveButtonStr === oldm.exportWav)\n        this.setState({saveButtonStr: m.exportWav});\n      else if (this.state.saveButtonStr === oldm.abortExport)\n        this.setState({saveButtonStr: m.abortExport});\n\n     return;\n   } // end if\n\n  }\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}